type Query {
	listRooms(
    ownerId: String!
  ): RoomConnection
	listMessagesForRoom(
		roomId: ID!
		sortDirection: ModelSortDirection
	): MessageConnection
}

type Mutation {
	createMessage(input: MessageInput!): Message
	createRoom(input: RoomInput!): Room
  updateChatPartnerRoomId(input: ChatPartnerRoomIdInput!): Room
}

type Subscription {
	onCreateRoomByOwnerId(ownerId: String!): Room 
    @aws_subscribe(mutations: ["createRoom"])
	onCreateMessageByRoomId(roomId: ID): Message
		@aws_subscribe(mutations: ["createMessage"])
}

type RoomConnection {
	items: [Room!]
	nextToken: String
}

type Room {
	id: ID
	createdAt: AWSDateTime
	name: String!
  chatPartnerId: String!
  chatPartnerRoomId: String
  ownerId: String!
	messages(
		sortDirection: ModelSortDirection
		limit: Int
		nextToken: String
	): MessageConnection
}

input RoomInput {
	name: String!
  chatPartnerId: String!
  chatPartnerRoomId: String
  ownerId: String!
}

input ChatPartnerRoomIdInput {
  roomId: ID!
  chatPartnerRoomId: String!
}

type MessageConnection {
	items: [Message!]
	nextToken: String
}

type Message {
	id: ID
	createdAt: AWSDateTime!
	roomId: ID!
  senderId: String!
  recipientId: String!
  content: String!
}

input MessageInput {
	roomId: ID!
  senderId: String!
  recipientId: String!
	content: String!
}

enum ModelSortDirection {
	ASC
	DESC
}